#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>
#include<stdio.h>
#include<stdlib.h>
#include<stdio.h>
#include<stdlib.h>
#define MAX_BUF_SIZE 1024

struct Node  {
	char* data;
	struct Node* next;
	struct Node* prev;
};

struct Node* root; // global variable - pointer to head node.

//Creates a new Node and returns pointer to it.    | NULL    | BUFFER  |  NULL  |
struct Node* GetNewNode(char* buffer) {         // |_________|_________|________|
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	(*newNode).data = buffer;              //(*pointer).field = value;
	(*newNode).prev = NULL;
	(*newNode).next = NULL;
	return newNode;
}

//Inserts a Node at head of doubly linked list
void InsertAtRoot(char* buffer) {
	struct Node* newNode = GetNewNode(buffer);
	if(root == NULL) {
		root = newNode;
		return 0;
	}
	root->prev = newNode;
	newNode->next = root;
	root = newNode;
}



//Prints all the elements in linked list in forward traversal order
void Print() {
	struct Node* temp = root;
	while(temp != NULL) {
		printf("%c",temp->data);
		temp = temp->next;
	}
	printf("\n");
}



int main(int argc, char **argv)
{
    char* pathname = argv[1];
    bool flag;
    int fd = open(argv[1], O_RDONLY);
//    if(fd < 0){
//        //error can not be opened
//        //return
//    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    char *buffer = (char *) malloc(sizeof(char) * MAX_BUF_SIZE);
    int bytes_read = read(fd, buffer, MAX_BUF_SIZE);

//    if(bytes_read == MAX_BUF_SIZE){
//        InsertAtRoot(buffer[i]);
//
//    }
        int i =0;
    do{ i++;
        InsertAtRoot(buffer[i]);
        char* myrealloced_array = realloc(buffer, (bytes_read =+ 10) * sizeof(char));

        //printf ("%c",buffer[i]);
    }while (buffer != '/0');

     Print();
     printf("%d",bytes_read);
    //deal with more and more reading

    //print buffers
    //free mallocs

	/*Driver code to test the implementation*/
	root = NULL; // empty list. set head as NULL.
	//InsertAtRoot(*buffer[i]); Print();
//    if (bytes_read < 0){
//        error opening the file.
//        return;
//    }


}
